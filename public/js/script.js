// Search function using the OpenLibrary API with the Book Title - must match   - used when user wants to add a book that they have already read 
const searchByTitle = (title,cb) => {
    fetch(`/api/search/title/${title}`)
    .then(response => response.json())
    .then(data => cb(data))
    .catch(err => console.log(err))
}

// Search function using the OpenLibrary API with author - used when user wants to add a book that they have already read 
const searchByAuthor = (author, cb) => {
    fetch(`/api/search/author/${author}`)
    .then(response => response.json())
    .then(data => cb(data))
    .catch(err => console.log(err))
}

// get book info:
const getBookInfoWorks = (ISBN, cb) =>{
    fetch(`/api/bookInfo/${ISBN}`)
    .then(response => response.json())
    .then(data => cb(data))
}

// get the book cover url
const getBookCover = (ISBN, cb) =>{
    return `http://covers.openlibrary.org/b/OLID/${ISBN}-M.jpg?default=false`
}

// helper function to shuffle array
const shuffle =  (array) => {
    for (let i = array.length-1; i > 0; i--){
        let j = Math.floor(Math.random()*(i+1));
        let temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    return array;
  }

// function to get all the recommendations
const getRecommendation = (cb) =>{
    
    // wait for all the recommendation api calls
    Promise.allSettled([
        fetch(`/api/recommendationUser/`),
        fetch(`/api/recommendationTD/`), 
        fetch(`/api/recommendationNY/hardcover-fiction`),
        
    ]).then(function (responses) {
        // console.log(responses);
        let fulfilledResponse = responses.filter(response => response.status === "fulfilled");
        // console.log(fulfilledResponse)
        return Promise.all(fulfilledResponse.map(function (response) {
              return response.value.json();
            }))
    }).then(function (data) {
        let allISBN = [];
        // console.log(data)
        for(let i = 0; i < data.length; i++){
            data[i].forEach(el => allISBN.push(el));
        }
        let uniqueISBN = [...new Set(allISBN)];
        
        // get all books from the user's list to remove from the list generated by the recommendation api calls
        fetch(`/api/books/user`)
        .then(response =>response.json())
        .then(results =>{
            let existingBooks = results.map(book => book.Book.ISBN);
            let finalISBN = uniqueISBN.filter(el => existingBooks.indexOf(el) === -1);
            // console.log(finalISBN.length)
            cb(shuffle(finalISBN).slice(0,Math.min(finalISBN.length,10)))        
        })

        
    }).catch(function (error) {
        // if there's an error, log it
        console.log(error);
        cb([])
    })
}

// function to add a new book under the user
// reading is a boolean
// bookObj will need to have the format 
//{
    // title:
    // author:
    // isbn:
//}
//the returned data will be the book information
const addBookToList = (bookObj,reading,cb) => {
    // add book to database if not already exists
    fetch(`/api/book`, {
        method: 'POST',
        headers: {
            'content-type' : 'application/json',
            'accept':'application/json'
        },
        body: JSON.stringify(bookObj)
    })
    // get the book id from the isbn
    .then(() =>{
        fetch(`/api/book/${bookObj.isbn}`)
        .then(response => response.json())
        .then(data => {
                
            let bookObj2 = {
                id: data[0].id,
                favourite: true,
                reading: reading 
            }

            // add book to user in the ReadingBooks table
            fetch(`/api/book/user`,{
                method:'POST',
                headers: {
                    'content-type' : 'application/json',
                    'accept':'application/json'
                },
                body: JSON.stringify(bookObj2)
            })
            .then(response => {
                return response.json()
            })
            .then(notExists=>{
                cb(notExists, data);
            })
            .catch(err => console.log(err))
        })
    })
}

// module.exports = { 
//     searchByTitle, 
//     searchByAuthor, 
//     getBookInfo, 
//     getBookCover, 
//     getRecommendation, 
//     addBookToList, 
// }


